package idealindustrial.autogen.fluids;

import gregtech.api.interfaces.IIconContainer;
import idealindustrial.autogen.material.II_Material;
import idealindustrial.autogen.material.II_Materials;
import idealindustrial.autogen.material.submaterial.FluidDef;
import idealindustrial.autogen.material.submaterial.FluidInfo;
import idealindustrial.autogen.material.submaterial.MatterState;
import idealindustrial.autogen.material.submaterial.render.RenderInfo;
import idealindustrial.reflection.events.II_EventListener;
import idealindustrial.textures.II_TextureManager;
import idealindustrial.util.lang.II_Lang;
import idealindustrial.util.lang.LocalizeEvent;
import idealindustrial.util.lang.materials.EngLocalizer;
import idealindustrial.util.lang.materials.MaterialLocalizer;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidRegistry;

import java.util.Arrays;

@II_EventListener
public class II_Fluids {

    public static II_Fluids INSTANCE = new II_Fluids();
    public static IIconContainer defaultTexture = II_TextureManager.INSTANCE.blockTexture("fluids/fluid." + "molten.autogenerated");


    public void init() {
        for (II_Material material : II_Materials.allMaterials) {
            if (material == null) {
                continue;
            }
            FluidInfo info = material.getLiquidInfo();
            for (MatterState state : Arrays.asList(MatterState.Liquid, MatterState.Gas, MatterState.Plasma)) {
                FluidDef def = info.get(state);
                if (def == null) {
                    continue;
                }
                String name = material.name().toLowerCase() + "." + state.toString().toLowerCase();
                addFluid(name, def, material.getRenderInfo(state));
            }
        }
    }

    public Fluid addFluid(String name, FluidDef def, RenderInfo renderInfo) {
        Fluid fluid = new II_Fluid(name).setRender(renderInfo);
        if (!FluidRegistry.registerFluid(fluid)) {
            fluid = FluidRegistry.getFluid(name);
        }
        fluid.setTemperature(def.getTemperature());
        def.setFluid(fluid);
        return fluid;
    }



    @LocalizeEvent
    public static void localize() {
        MaterialLocalizer localizer = EngLocalizer.getInstance();
        for (II_Material material : II_Materials.allMaterials) {
            if (material == null) {
                continue;
            }
            FluidInfo info = material.getLiquidInfo();
            for (MatterState state : Arrays.asList(MatterState.Liquid, MatterState.Gas, MatterState.Plasma)) {
                FluidDef def = info.get(state);
                if (def == null) {
                    continue;
                }
                String name = material.name().toLowerCase() + "." + state.toString().toLowerCase();
                II_Lang.add(name, localizer.get(material, state));
            }

        }
    }
}